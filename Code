#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "Tala-iPhone";
const char* password = "Ta120037a";

WebServer server(80);

const int motor1Pin1 = 5;
const int motor1Pin2 = 23;
const int motor2Pin1 = 19;
const int motor2Pin2 = 18;
const int enA = 25;
const int enB = 27;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);

  server.on("/", handleRoot);
  server.on("/direction", handleDirection);

  server.begin();
  Serial.println("Server started");
}

void loop() {
  server.handleClient();
}

void handleRoot() {
  server.send(200, "text/html", R"rawliteral(
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Car Directional</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f0f0f0;
                text-align: center;
                margin: 0;
                padding: 0;
            }

            .container {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                height: 100vh;
            }

            h1 {
                font-size: 24px;
                margin-bottom: 20px;
            }

            .buttons {
                position: relative;
                width: 300px;
                height: 300px;
            }

            button {
                width: 100px;
                height: 40px;
                cursor: pointer;
                border: none;
                outline: none;
                font-size: 16px;
                transition: background-color 0.3s ease, color 0.3s ease;
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                border-radius: 5px;
                box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
            }

            button:hover {
                background-color: white;
                color: pink;
            }

            .stop {
                background-color: pink;
                color: white;
            }

            .forward {
                background-color: pink;
                color: white;
                top: 20%;
            }

            .backward {
                background-color: pink;
                color: white;
                top: 80%;
            }

            .left {
                background-color: pink;
                color: white;
                left: 10%;
            }

            .right {
                background-color: pink;
                color: white;
                left: 90%;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Car Directional</h1>
            <div class="buttons">
                <button class="stop" onclick="sendDirection('S')">Stop</button>
                <button class="forward" onclick="sendDirection('F')">Forward</button>
                <button class="backward" onclick="sendDirection('B')">Backward</button>
                <button class="left" onclick="sendDirection('L')">Left</button>
                <button class="right" onclick="sendDirection('R')">Right</button>
            </div>
        </div>

        <script>
            function sendDirection(direction) {
                fetch(`/direction?dir=${direction}`);
            }
        </script>
    </body>
    </html>
  )rawliteral");
}

void handleDirection() {
  String direction = server.arg("dir");
  
  if (direction == "F") {
    digitalWrite(motor1Pin1, HIGH);
    digitalWrite(motor1Pin2, LOW);
    digitalWrite(motor2Pin1, HIGH);
    digitalWrite(motor2Pin2, LOW);
    analogWrite(enA, 255);
    analogWrite(enB, 255);
  } else if (direction == "B") {
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, HIGH);
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, HIGH);
    analogWrite(enA, 255);
    analogWrite(enB, 255);
  } else if (direction == "L") {
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, HIGH);
    digitalWrite(motor2Pin1, HIGH);
    digitalWrite(motor2Pin2, LOW);
    analogWrite(enA, 255);
    analogWrite(enB, 255);
  } else if (direction == "R") {
    digitalWrite(motor1Pin1, HIGH);
    digitalWrite(motor1Pin2, LOW);
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, HIGH);
    analogWrite(enA, 255);
    analogWrite(enB, 255);
  } else if (direction == "S") {
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, LOW);
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, LOW);
    analogWrite(enA, 0);
    analogWrite(enB, 0);
  }
  server.send(200, "text/plain", "OK");
}
